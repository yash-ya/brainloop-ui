# =================================================================
# Stage 1: Dependency Installation (No Change)
# =================================================================
# This stage remains the same, using a full Node image to install dependencies.
FROM node:18-alpine AS deps
WORKDIR /app

COPY package.json package-lock.json* ./
RUN npm ci --only=production

# =================================================================
# Stage 2: Code Builder (No Change)
# =================================================================
# This stage also remains the same, using a full Node image to build the app.
FROM node:18-alpine AS builder
WORKDIR /app

COPY --from=deps /app/node_modules ./node_modules
COPY . .

RUN npm ci
RUN npm run build

# =================================================================
# Stage 3: Production Runner (THIS IS THE NEW PART)
# =================================================================
# This is our final, ultra-lightweight, and secure image.
# We use Google's official 'distroless' image for Node.js 18.
FROM gcr.io/distroless/nodejs18-debian11 AS runner
WORKDIR /app

# Set the environment to production.
ENV NODE_ENV=production
ENV HOSTNAME 0.0.0.0

# Copy the necessary built artifacts from the 'builder' stage.
# The 'distroless' image has a default non-root user named 'nonroot'.
# We copy the files and set ownership to this user for better security.
COPY --from=builder --chown=nonroot:nonroot /app/public ./public
COPY --from=builder --chown=nonroot:nonroot /app/.next/standalone ./
COPY --from=builder --chown=nonroot:nonroot /app/.next/static ./.next/static

# Switch the active user to the non-root user.
USER nonroot

# Expose the port the app will run on.
EXPOSE 3000

# The command to start the application.
# The distroless image's entrypoint is already set to "node",
# so we just need to provide the server script.
CMD ["server.js"]
